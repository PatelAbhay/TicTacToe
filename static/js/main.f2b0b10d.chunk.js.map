{"version":3,"sources":["components/Board.js","components/Menu.js","App.js","serviceWorker.js","index.js"],"names":["board","Array","i","length","j","game_state","game_mode","turn","Board","bestMove","bestScore","Infinity","this","addSymbol","score","minimaxWithPruning","console","log","result","checkBoard","alert","depth","isMaximizing","alpha","beta","curBoard","makeComputerMove","row","col","undo","symbol","symbolString","cells","document","getElementsByClassName","innerHTML","classList","remove","add","checkGameState","className","onClick","updateBoard","React","Component","Menu","clicked","activeButton","inactiveButton","textContent","mode","resetBoard","handleClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f2b0b10d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Board.css'\r\n\r\nvar board = new Array(3);\r\nfor (var i = 0; i < board.length; i++) {\r\n    board[i] = new Array(3);\r\n    for (var j = 0; j < board[i].length; j++) {\r\n        board[i][j] = \"\";\r\n    }\r\n}\r\n\r\nconst playerX = '&#10005';\r\nconst playerO = '&#9675';\r\nvar game_state = 0;\r\nvar game_mode = 1;\r\nvar turn = true;\r\n\r\nclass Board extends React.Component {\r\n\r\n    checkBoard() {\r\n        for (var i = 0; i < 3; i++) {\r\n            if (board[i][0] === board[i][1] && board[i][1] === board[i][2] && board[i][0] !== \"\") {\r\n                return board[i][0];\r\n            }\r\n        }\r\n\r\n        for (i = 0; i < 3; i++) {\r\n            if (board[0][i] === board[1][i] && board[1][i] === board[2][i] && board[0][i] !== \"\") {\r\n                return board[0][i];\r\n            }\r\n        }\r\n\r\n        if (board[0][0] === board[1][1] && board[1][1] === board[2][2] && board[0][0] !== \"\") {\r\n            return board[0][0];\r\n        }\r\n        if (board[2][0] === board[1][1] && board[1][1] === board[0][2] && board[2][0] !== \"\") {\r\n            return board[2][0];\r\n        }\r\n\r\n        for (i = 0; i < 3; i++) {\r\n            for (var j = 0; j < 3; j++) {\r\n                if (board[i][j] === \"\") return 0;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    makeComputerMove() {\r\n        var bestMove;\r\n        var bestScore = -Infinity;\r\n        for (var i = 0; i < 3; i++) {\r\n            for (var j = 0; j < 3; j++) {\r\n                if (board[i][j] === \"\") {\r\n                    this.addSymbol(i, j, false, playerO, \"playerO\");\r\n                    var score = this.minimaxWithPruning(0, false, -Infinity, Infinity);\r\n                    this.addSymbol(i, j, true, playerO, \"playerO\");\r\n                    if (score > bestScore) {\r\n                        bestScore = score;\r\n                        bestMove = [i, j]\r\n                        console.log(bestMove)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.addSymbol(bestMove[0], bestMove[1], false, playerO, \"playerO\");\r\n        var result = this.checkBoard();\r\n        if (result === playerX || result === playerO) {\r\n            if (turn) alert(\"Player X Won\")\r\n            else alert(\"Computer Won\")\r\n            game_state = 1;\r\n        }\r\n        else if (result === -1) {\r\n            alert(\"Draw\")\r\n            game_state = -1;\r\n        }\r\n    }\r\n\r\n    minimaxWithPruning(depth, isMaximizing, alpha, beta) {\r\n        var curBoard = this.checkBoard();\r\n        if (curBoard === playerX) {\r\n            return -10;\r\n        }\r\n        else if (curBoard === playerO) {\r\n            return 10;\r\n        }\r\n        else if (curBoard === -1) {\r\n            return 0;\r\n        }\r\n\r\n        var bestScore;\r\n        if (isMaximizing) {\r\n            bestScore = -Infinity;\r\n            for (let i = 0; i < 3; i++) {\r\n                for (let j = 0; j < 3; j++) {\r\n                    if (board[i][j] === \"\") {\r\n                        this.addSymbol(i, j, false, playerO, \"playerO\");\r\n                        var score = this.minimaxWithPruning(depth + 1, false, alpha, beta);\r\n                        this.addSymbol(i, j, true, playerO, \"playerO\");\r\n                        if (score > bestScore) bestScore = score;\r\n                        if (score > alpha) alpha = score;\r\n                        if (alpha >= beta) break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            bestScore = Infinity;\r\n            for (let i = 0; i < 3; i++) {\r\n                for (let j = 0; j < 3; j++) {\r\n                    if (board[i][j] === \"\") {\r\n                        this.addSymbol(i, j, false, playerX, \"playerX\");\r\n                        score = this.minimaxWithPruning(depth + 1, true, alpha, beta);\r\n                        this.addSymbol(i, j, true, playerX, \"playerX\");\r\n                        if (bestScore > score) {\r\n                            bestScore = score;\r\n                        }\r\n                        if (beta > score) beta = score;\r\n                        if (alpha >= beta) break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return bestScore;\r\n    }\r\n\r\n    checkGameState() {\r\n        game_state = this.checkBoard();\r\n        if (game_state === 0) {\r\n            turn = !turn;\r\n            if (game_mode === 2) {\r\n                this.makeComputerMove();\r\n                turn = !turn;\r\n            }\r\n        }\r\n        else if (game_state === -1) alert(\"Draw\")\r\n        else {\r\n            if (turn) alert(\"Player X Won\")\r\n            else alert(\"Player O Won\")\r\n        }\r\n    }\r\n\r\n    addSymbol(row, col, undo, symbol, symbolString) {\r\n        var cells = document.getElementsByClassName(\"board-cell\");\r\n\r\n        if (undo) {\r\n            cells[(row * 3) + col].innerHTML = \"\";\r\n            cells[(row * 3) + col].classList.remove(\"playerX\");\r\n            cells[(row * 3) + col].classList.remove(\"playerO\");\r\n            board[row][col] = \"\";\r\n        }\r\n        else {\r\n            cells[(row * 3) + col].innerHTML = symbol;\r\n            cells[(row * 3) + col].classList.add(symbolString);\r\n            board[row][col] = symbol;\r\n        }\r\n    }\r\n\r\n    updateBoard(row, col) {\r\n        var cells = document.getElementsByClassName(\"board-cell\");\r\n        if (cells[(row * 3) + col].innerHTML === \"\" && game_state === 0) {\r\n            var symbol, symbolString;\r\n            if (turn) {\r\n                symbol = playerX;\r\n                symbolString = \"playerX\";\r\n            }\r\n            else {\r\n                symbol = playerO;\r\n                symbolString = \"playerO\";\r\n            }\r\n            this.addSymbol(row, col, false, symbol, symbolString);\r\n            this.checkGameState(row, col);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"board-grid\">\r\n                <div className=\"board-cell\" onClick={() => this.updateBoard(0, 0)}></div>\r\n                <div className=\"board-cell\" onClick={() => this.updateBoard(0, 1)}></div>\r\n                <div className=\"board-cell\" onClick={() => this.updateBoard(0, 2)}></div>\r\n                <div className=\"board-cell\" onClick={() => this.updateBoard(1, 0)}></div>\r\n                <div className=\"board-cell\" onClick={() => this.updateBoard(1, 1)}></div>\r\n                <div className=\"board-cell\" onClick={() => this.updateBoard(1, 2)}></div>\r\n                <div className=\"board-cell\" onClick={() => this.updateBoard(2, 0)}></div>\r\n                <div className=\"board-cell\" onClick={() => this.updateBoard(2, 1)}></div>\r\n                <div className=\"board-cell\" onClick={() => this.updateBoard(2, 2)}></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;\r\n\r\nexport const resetBoard = (mode) => {\r\n    var cells = document.getElementsByClassName(\"board-cell\");\r\n\r\n    for (var i = 0; i < 3; i++) {\r\n        for (var j = 0; j < 3; j++) {\r\n            board[i][j] = \"\";\r\n            cells[(i * 3) + j].innerHTML = \"\";\r\n            cells[(i * 3) + j].classList.remove(\"playerX\")\r\n            cells[(i * 3) + j].classList.remove(\"playerO\")\r\n        }\r\n    }\r\n    game_state = 0;\r\n    turn = true;\r\n    game_mode = mode;\r\n};\r\n","import React from 'react';\r\nimport './Menu.css'\r\nimport { resetBoard } from './Board.js'\r\n\r\nvar mode = 1;\r\n\r\nclass Menu extends React.Component {\r\n\r\n    handleClick(clicked) {\r\n        var activeButton = document.getElementsByClassName(\"activeButton\")[0];\r\n        var inactiveButton = document.getElementsByClassName(\"inactiveButton\")[0];\r\n\r\n        if (clicked !== activeButton.textContent) {\r\n            activeButton.classList.remove(\"activeButton\");\r\n            activeButton.classList.add(\"inactiveButton\");\r\n\r\n            inactiveButton.classList.remove(\"inactiveButton\");\r\n            inactiveButton.classList.add(\"activeButton\");\r\n        }\r\n        //change game_state\r\n        if (clicked === \"VS Computer\") mode = 2;\r\n        else mode = 1;\r\n        resetBoard(mode);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"menu-container\" >\r\n                <h1>Tic <span>Tac</span> Toe</h1>\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td><button className=\"button1 activeButton\" onClick={() => this.handleClick(\"2 Players\")}>2 Players</button></td>\r\n                            <td><button className=\"button2 inactiveButton\" onClick={() => this.handleClick(\"VS Computer\")}>VS Computer</button></td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Menu from './components/Menu';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"Main\">\n        <Board />\n        <Menu />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}